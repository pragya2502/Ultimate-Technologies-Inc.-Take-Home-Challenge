{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "login_times = pd.read_json('logins.json')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>login_time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1970-01-01 20:13:18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1970-01-01 20:16:10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1970-01-01 20:16:37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1970-01-01 20:16:36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1970-01-01 20:26:21</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           login_time\n",
       "0 1970-01-01 20:13:18\n",
       "1 1970-01-01 20:16:10\n",
       "2 1970-01-01 20:16:37\n",
       "3 1970-01-01 20:16:36\n",
       "4 1970-01-01 20:26:21"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "login_times.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>login_time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>93137</th>\n",
       "      <td>1970-04-13 18:50:19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93138</th>\n",
       "      <td>1970-04-13 18:43:56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93139</th>\n",
       "      <td>1970-04-13 18:54:02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93140</th>\n",
       "      <td>1970-04-13 18:57:38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93141</th>\n",
       "      <td>1970-04-13 18:54:23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               login_time\n",
       "93137 1970-04-13 18:50:19\n",
       "93138 1970-04-13 18:43:56\n",
       "93139 1970-04-13 18:54:02\n",
       "93140 1970-04-13 18:57:38\n",
       "93141 1970-04-13 18:54:23"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "login_times.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 93142 entries, 0 to 93141\n",
      "Data columns (total 1 columns):\n",
      " #   Column      Non-Null Count  Dtype         \n",
      "---  ------      --------------  -----         \n",
      " 0   login_time  93142 non-null  datetime64[ns]\n",
      "dtypes: datetime64[ns](1)\n",
      "memory usage: 727.8 KB\n"
     ]
    }
   ],
   "source": [
    "login_times.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Aggregate the login Time according to 15 mins time interval\n",
    "login_times.set_index('login_time', inplace=True)\n",
    "login_times['count'] = 1\n",
    "login_times.sort_index(inplace=True)\n",
    "login_times_agg = login_times.resample(\"15min\").sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>login_time</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1970-01-01 20:00:00</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1970-01-01 20:15:00</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1970-01-01 20:30:00</th>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1970-01-01 20:45:00</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1970-01-01 21:00:00</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     count\n",
       "login_time                \n",
       "1970-01-01 20:00:00      2\n",
       "1970-01-01 20:15:00      6\n",
       "1970-01-01 20:30:00      9\n",
       "1970-01-01 20:45:00      7\n",
       "1970-01-01 21:00:00      1"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "login_times_agg.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "93142"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "login_times_agg['count'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "DatetimeIndex: 9788 entries, 1970-01-01 20:00:00 to 1970-04-13 18:45:00\n",
      "Freq: 15T\n",
      "Data columns (total 1 columns):\n",
      " #   Column  Non-Null Count  Dtype\n",
      "---  ------  --------------  -----\n",
      " 0   count   9788 non-null   int64\n",
      "dtypes: int64(1)\n",
      "memory usage: 152.9 KB\n"
     ]
    }
   ],
   "source": [
    "# Step 2: Visualize and describe the resulting time series of login counts in ways that best characterize the underlying patterns of the demand.\n",
    "login_times_agg.info()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "today = datetime.datetime(2017, 10, 20)\n",
    "today.weekday()  # what I look for"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "login_times_agg.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## We can't really see much from this graph, other than that demand rises with what looks like a constant period. This is probably demand rising on the weekends. Let's try smoothing the with a window of the previos day to better see when demand rises.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "login_times_agg.rolling(window=96).mean().plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### We can better see how demand rises and falls on a weekly basis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "login_times_agg.loc['1970-02'].plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "login_times_agg.loc['1970-02'].rolling(window=96).mean().plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " So demand clearly rises on the weekends. There are declines in demand on the weekend as well. My guess would be the declines are due to nighttime. Let's get more granular."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datetime.datetime(1970, 2, 1).weekday()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "login_times_agg.loc['1970-02-01':'1970-02-07'].plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "login_times_agg.loc['1970-02-01':'1970-02-10'].rolling(window=96).mean().plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "unsmoothed = login_times_agg['count']['1970-02-01':'1970-02-07']\n",
    "smoothed = unsmoothed.rolling(window=48).mean()\n",
    "one_week = pd.DataFrame({'unsmoothed':unsmoothed, 'smoothed':smoothed})\n",
    "one_week.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Let's plot one weekend to see how demand spikes. We'll take the weekend of Friday, February 6 to Monday, February 9."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "login_times_agg.loc['1970-02-06':'1970-02-08'].plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "login_times_agg.loc['1970-02-04':'1970-02-05'].plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Demand is highest at noon, and at midnight."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's try a Tuesday-Wednesday pair in March.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "date = datetime.datetime(1970, 3, 1)\n",
    "date.weekday()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "So March 1 is a Sunday. Let's take March 3 and March 4."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "login_times_agg.loc['1970-03-03':'1970-03-04' ].plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Again, demand is highest at noon and and midnight.\n",
    "\n",
    "So we can reach 2 broad conclusions from our exploration:\n",
    "\n",
    "Demand is greater on the weekends than during the week.\n",
    "Deman is greatest around midnight and noon for both weekdays and weekends"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part 2: Experiment and Metrics Design\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. What would you choose as the key measure of success of this experiment in encouraging driver partners to serve both cities, and why would you choose this metric?\n",
    "\n",
    "\n",
    "I will assume for the purpose of this question that Ultimate’s goal is to maximize revenue. One easy way\n",
    "of seeing if revenue has been maximized is to see if a price equilibrium has been reached in both cities.\n",
    "That is, if the cost per unit distance that Ultimate charges is the same in both Gotham and Metropolis,\n",
    "then Ultimate is maximizing its revenue. A simple example shows why.\n",
    "If most of Ultimate’s drivers are in Gotham, then it might be the case that a trip in Gotham costs $5/unit\n",
    "distance. Meanwhile, because there is a reduced supply of drivers in Metropolis, Ultimate might be able\n",
    "to charge $10/unit distance there to eliminate unmet demand. In order to reap more revenue, Ultimate\n",
    "would want some of its drivers in Gotham to move to Metropolis so they can take advantage of the\n",
    "higher returns there. Doing so would also reduce the supply of drivers in Gotham, thereby also allowing\n",
    "the drivers who remain in Gotham to earn more.\n",
    "Presumably, this arrival at equilibrium should happen on its own. However it might be the case that the\n",
    "presence of the toll distorts the market in such a way that drivers think it is better for them to remain in\n",
    "one city. That is, from an economist’s point of view, the toll might cause drivers to behave irrationally.\n",
    "It is not hard to see why. Returning to the example above, if demand leads to $10/unit distance in\n",
    "Metropolis and only $5/unit distance in Gotham, drivers should leave Gothan for Metropolis until\n",
    "demand evens out. However, if we introduce a $20 toll that drivers must pay, then it is not worth it for\n",
    "Gotham drivers to cross into Metropolis, at least for the short term. By removing this cost as a\n",
    "consideration for drivers, Ultimate allows drivers to think only about meeting demand. It removes the\n",
    "burden for drivers of calculating whether it is worth crossing to earn the extra cost/unit distance. Of\n",
    "course, Ultimate itself should do research into whether drivers earn enough money by crossing to offset\n",
    "the toll cost. So the calculation would be, does demand remain high enough in Metropolis and do\n",
    "drivers complete enough trips in Metropolis to warrant crossing into Gotham (we can also add to this\n",
    "the extra revenue earned by the drivers remaining in Gotham). But this is beyond the scope of this\n",
    "problem. Here we are assuming that Ultimate has already done all this research and wants drivers to\n",
    "cross when a demand imbalance exists.\n",
    "So in my mind, the best metric for success would be the percentage of drivers who cross the bridge from\n",
    "the city with less demand to the city with greater demand when there is a demand imbalance in a given\n",
    "period of time. To perform the experiment properly, we would want to know with high confidence what\n",
    "percentage of drivers cross the bridge when Ultimate doesn’t pay the toll so we can see how much this\n",
    "increases when Ultimate pays the toll. We would want this increase to be as large as possible.\n",
    "If we add a little more complexity to the question, and a lot more verbosity, in order to have a more\n",
    "accurate answer from the revenue maximization point of view, the metric we might want to maximize\n",
    "would be ‘the percentage of drivers who cross the bridge such that Ultimate believes that the extra\n",
    "revenue gained per trip by crossing more than offsets the cost of crossing’.\n",
    "A secondary, related metric we could use is the time it takes to even out demand imbalances. We would\n",
    "expect it to be smaller when we pay the tolls than when we don’t. \n",
    "\n",
    "A number of assumptions were made in the above answer. If we are in a more naïve world where\n",
    "Ultimate doesn’t have revenue maximization as its primary goal and its primary goal in this case is really\n",
    "to have drivers crossing over often, then the best measure of success would be the most obvious one:\n",
    "the number of times drivers cross the bridge per whatever time frame we want. This is equivalent to the\n",
    "expenditures Ultimate must make for paying the toll. In this more naïve world, Ultimate wants to\n",
    "maximize trips made and its expenditures on tolls. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Describe a practical experiment you would design to compare the effectiveness of the proposed\n",
    "change in relation to the key measure of success. Please provide details on:\n",
    "a. how you will implement the experiment\n",
    "\n",
    "As mentioned in the first answer, before implementing the proposed change (paying drivers’ toll fees)\n",
    "we would want to get a really strong estimate of what percentage of drivers already cross the bridge\n",
    "and pay the toll in order to take advantage of the higher demand in the other city.\n",
    "We would then want to see what that number changes to when we pay the toll fees.\n",
    "In terms of practical implementation, this should not be difficult to implement assuming Ultimate has an\n",
    "app that tracks drivers locations as well as the current average demand in each city (as given by\n",
    "price/unit distance).\n",
    "\n",
    "b. what statistical test(s) you will conduct to verify the significance of the observation\n",
    "\n",
    "We would use a hypothesis test comparing population proportions where the proportion in question is\n",
    "the percentage of drivers who cross from the city with less demand to the city with greater demand in a\n",
    "given frame of time. Our null hypothesis would be that the proportion is the same irrespective of our\n",
    "proposed change.\n",
    "\n",
    "c. how you would interpret the results and provide recommendations to the city operations team\n",
    "along with any caveats.\n",
    "\n",
    "If we saw that the change in proportion (or percentage) of drivers who cross the bridge from the city\n",
    "with greater demand to the city with less demand in a given period was large, than we would know that\n",
    "paying the drivers’ toll fees was an effective intervention, at least in terms of meeting demand quicker.\n",
    "If we saw that this percentage change was small, then we would know that the proposed change was\n",
    "not effective, and we would need to provide additional incentives to drivers to cross the bridge.\n",
    "My recommendations to the operations team would depend a lot on some of the considerations already\n",
    "mentioned above. That is, does demand remain strong enough in the city to which drivers are going and\n",
    "do drivers perform enough trips in the ‘new’ city to justify the cost of having Ultimate pay the toll?\n",
    "Ideally there should be some analysis performed on this question before the change is implemented to\n",
    "know whether the change should be made in the first place. But some questions can only be answered\n",
    "with real data, so from my perspective, as a consultant tasked with maximizing Ultimate’s revenue, I\n",
    "would want to know if the net effect to revenue from paying the tolls before recommending to city\n",
    "managers whether to keep the change or not. \n",
    "\n",
    "Of course, if I was also concerned about competitors, then I might be willing to tolerate losing revenue\n",
    "from paying the tolls in order to harm the bottom line of my competitors and therefore increase\n",
    "Ultimate’s overall revenue. This would need to be incorporated into the analysis, but it would lead to a\n",
    "greater likelihood of me recommending to keep the change."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part 3: Predictive Modelling\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ultimate     is     interested     in     predicting     rider     retention.    To    help    explore     this    question,    we    have  provided     a     sample    dataset     of     a     cohort    of    users    who     signed    up     for    an    Ultimate    account     in  January    2014.    The     data    was    pulled     several    months     later;    we     consider    a    user     retained     if     they  were     “active”     (i.e.     took    a     trip)     in     the     preceding    30    days.   \n",
    "\n",
    "We     would     like     you     to    use     this    data     set     to    help    understand    what     factors    are     the    best    predictors  for     retention,    and    offer     suggestions     to     operationalize     those     insights     to    help    Ultimate.   \n",
    "\n",
    "The    data     is     in     the    attached     file     ultimate_data_challenge.json.    See    below     for    a    detailed  description     of     the    dataset.     Please     include    any     code     you    wrote     for     the    analysis    and    delete     the  dataset    when     you    have     finished     with     the     challenge."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "import seaborn as sns\n",
    "import sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "with open('ultimate_data_challenge.json') as f:\n",
    "    data = json.load(f)\n",
    "df = pd.DataFrame(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(50000, 12)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 50000 entries, 0 to 49999\n",
      "Data columns (total 12 columns):\n",
      " #   Column                  Non-Null Count  Dtype  \n",
      "---  ------                  --------------  -----  \n",
      " 0   city                    50000 non-null  object \n",
      " 1   trips_in_first_30_days  50000 non-null  int64  \n",
      " 2   signup_date             50000 non-null  object \n",
      " 3   avg_rating_of_driver    41878 non-null  float64\n",
      " 4   avg_surge               50000 non-null  float64\n",
      " 5   last_trip_date          50000 non-null  object \n",
      " 6   phone                   49604 non-null  object \n",
      " 7   surge_pct               50000 non-null  float64\n",
      " 8   ultimate_black_user     50000 non-null  bool   \n",
      " 9   weekday_pct             50000 non-null  float64\n",
      " 10  avg_dist                50000 non-null  float64\n",
      " 11  avg_rating_by_driver    49799 non-null  float64\n",
      "dtypes: bool(1), float64(6), int64(1), object(4)\n",
      "memory usage: 4.2+ MB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Index(['city', 'trips_in_first_30_days', 'signup_date', 'avg_rating_of_driver',\n",
       "       'avg_surge', 'last_trip_date', 'phone', 'surge_pct',\n",
       "       'ultimate_black_user', 'weekday_pct', 'avg_dist',\n",
       "       'avg_rating_by_driver'],\n",
       "      dtype='object')"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "display(df.shape)\n",
    "display(df.info())\n",
    "display(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>trips_in_first_30_days</th>\n",
       "      <th>avg_rating_of_driver</th>\n",
       "      <th>avg_surge</th>\n",
       "      <th>surge_pct</th>\n",
       "      <th>weekday_pct</th>\n",
       "      <th>avg_dist</th>\n",
       "      <th>avg_rating_by_driver</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>50000.000000</td>\n",
       "      <td>41878.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>49799.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.278200</td>\n",
       "      <td>4.601559</td>\n",
       "      <td>1.074764</td>\n",
       "      <td>8.849536</td>\n",
       "      <td>60.926084</td>\n",
       "      <td>5.796827</td>\n",
       "      <td>4.778158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.792684</td>\n",
       "      <td>0.617338</td>\n",
       "      <td>0.222336</td>\n",
       "      <td>19.958811</td>\n",
       "      <td>37.081503</td>\n",
       "      <td>5.707357</td>\n",
       "      <td>0.446652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.300000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>33.300000</td>\n",
       "      <td>2.420000</td>\n",
       "      <td>4.700000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.900000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>66.700000</td>\n",
       "      <td>3.880000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.050000</td>\n",
       "      <td>8.600000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>6.940000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>125.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>160.960000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       trips_in_first_30_days  avg_rating_of_driver     avg_surge  \\\n",
       "count            50000.000000          41878.000000  50000.000000   \n",
       "mean                 2.278200              4.601559      1.074764   \n",
       "std                  3.792684              0.617338      0.222336   \n",
       "min                  0.000000              1.000000      1.000000   \n",
       "25%                  0.000000              4.300000      1.000000   \n",
       "50%                  1.000000              4.900000      1.000000   \n",
       "75%                  3.000000              5.000000      1.050000   \n",
       "max                125.000000              5.000000      8.000000   \n",
       "\n",
       "          surge_pct   weekday_pct      avg_dist  avg_rating_by_driver  \n",
       "count  50000.000000  50000.000000  50000.000000          49799.000000  \n",
       "mean       8.849536     60.926084      5.796827              4.778158  \n",
       "std       19.958811     37.081503      5.707357              0.446652  \n",
       "min        0.000000      0.000000      0.000000              1.000000  \n",
       "25%        0.000000     33.300000      2.420000              4.700000  \n",
       "50%        0.000000     66.700000      3.880000              5.000000  \n",
       "75%        8.600000    100.000000      6.940000              5.000000  \n",
       "max      100.000000    100.000000    160.960000              5.000000  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>trips_in_first_30_days</th>\n",
       "      <th>signup_date</th>\n",
       "      <th>avg_rating_of_driver</th>\n",
       "      <th>avg_surge</th>\n",
       "      <th>last_trip_date</th>\n",
       "      <th>phone</th>\n",
       "      <th>surge_pct</th>\n",
       "      <th>ultimate_black_user</th>\n",
       "      <th>weekday_pct</th>\n",
       "      <th>avg_dist</th>\n",
       "      <th>avg_rating_by_driver</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>King's Landing</td>\n",
       "      <td>4</td>\n",
       "      <td>2014-01-25</td>\n",
       "      <td>4.7</td>\n",
       "      <td>1.10</td>\n",
       "      <td>2014-06-17</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>15.4</td>\n",
       "      <td>True</td>\n",
       "      <td>46.2</td>\n",
       "      <td>3.67</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Astapor</td>\n",
       "      <td>0</td>\n",
       "      <td>2014-01-29</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>2014-05-05</td>\n",
       "      <td>Android</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>50.0</td>\n",
       "      <td>8.26</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Astapor</td>\n",
       "      <td>3</td>\n",
       "      <td>2014-01-06</td>\n",
       "      <td>4.3</td>\n",
       "      <td>1.00</td>\n",
       "      <td>2014-01-07</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>100.0</td>\n",
       "      <td>0.77</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>King's Landing</td>\n",
       "      <td>9</td>\n",
       "      <td>2014-01-10</td>\n",
       "      <td>4.6</td>\n",
       "      <td>1.14</td>\n",
       "      <td>2014-06-29</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>20.0</td>\n",
       "      <td>True</td>\n",
       "      <td>80.0</td>\n",
       "      <td>2.36</td>\n",
       "      <td>4.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Winterfell</td>\n",
       "      <td>14</td>\n",
       "      <td>2014-01-27</td>\n",
       "      <td>4.4</td>\n",
       "      <td>1.19</td>\n",
       "      <td>2014-03-15</td>\n",
       "      <td>Android</td>\n",
       "      <td>11.8</td>\n",
       "      <td>False</td>\n",
       "      <td>82.4</td>\n",
       "      <td>3.13</td>\n",
       "      <td>4.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             city  trips_in_first_30_days signup_date  avg_rating_of_driver  \\\n",
       "0  King's Landing                       4  2014-01-25                   4.7   \n",
       "1         Astapor                       0  2014-01-29                   5.0   \n",
       "2         Astapor                       3  2014-01-06                   4.3   \n",
       "3  King's Landing                       9  2014-01-10                   4.6   \n",
       "4      Winterfell                      14  2014-01-27                   4.4   \n",
       "\n",
       "   avg_surge last_trip_date    phone  surge_pct  ultimate_black_user  \\\n",
       "0       1.10     2014-06-17   iPhone       15.4                 True   \n",
       "1       1.00     2014-05-05  Android        0.0                False   \n",
       "2       1.00     2014-01-07   iPhone        0.0                False   \n",
       "3       1.14     2014-06-29   iPhone       20.0                 True   \n",
       "4       1.19     2014-03-15  Android       11.8                False   \n",
       "\n",
       "   weekday_pct  avg_dist  avg_rating_by_driver  \n",
       "0         46.2      3.67                   5.0  \n",
       "1         50.0      8.26                   5.0  \n",
       "2        100.0      0.77                   5.0  \n",
       "3         80.0      2.36                   4.9  \n",
       "4         82.4      3.13                   4.9  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>trips_in_first_30_days</th>\n",
       "      <th>signup_date</th>\n",
       "      <th>avg_rating_of_driver</th>\n",
       "      <th>avg_surge</th>\n",
       "      <th>last_trip_date</th>\n",
       "      <th>phone</th>\n",
       "      <th>surge_pct</th>\n",
       "      <th>ultimate_black_user</th>\n",
       "      <th>weekday_pct</th>\n",
       "      <th>avg_dist</th>\n",
       "      <th>avg_rating_by_driver</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>49995</th>\n",
       "      <td>King's Landing</td>\n",
       "      <td>0</td>\n",
       "      <td>2014-01-25</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2014-06-05</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>100.0</td>\n",
       "      <td>5.63</td>\n",
       "      <td>4.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49996</th>\n",
       "      <td>Astapor</td>\n",
       "      <td>1</td>\n",
       "      <td>2014-01-24</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2014-01-25</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49997</th>\n",
       "      <td>Winterfell</td>\n",
       "      <td>0</td>\n",
       "      <td>2014-01-31</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2014-05-22</td>\n",
       "      <td>Android</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>100.0</td>\n",
       "      <td>3.86</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49998</th>\n",
       "      <td>Astapor</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-01-14</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2014-01-15</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>100.0</td>\n",
       "      <td>4.58</td>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49999</th>\n",
       "      <td>Astapor</td>\n",
       "      <td>0</td>\n",
       "      <td>2014-01-18</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2014-04-20</td>\n",
       "      <td>Android</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.49</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 city  trips_in_first_30_days signup_date  \\\n",
       "49995  King's Landing                       0  2014-01-25   \n",
       "49996         Astapor                       1  2014-01-24   \n",
       "49997      Winterfell                       0  2014-01-31   \n",
       "49998         Astapor                       2  2014-01-14   \n",
       "49999         Astapor                       0  2014-01-18   \n",
       "\n",
       "       avg_rating_of_driver  avg_surge last_trip_date    phone  surge_pct  \\\n",
       "49995                   5.0        1.0     2014-06-05   iPhone        0.0   \n",
       "49996                   NaN        1.0     2014-01-25   iPhone        0.0   \n",
       "49997                   5.0        1.0     2014-05-22  Android        0.0   \n",
       "49998                   3.0        1.0     2014-01-15   iPhone        0.0   \n",
       "49999                   NaN        1.0     2014-04-20  Android        0.0   \n",
       "\n",
       "       ultimate_black_user  weekday_pct  avg_dist  avg_rating_by_driver  \n",
       "49995                False        100.0      5.63                   4.2  \n",
       "49996                False          0.0      0.00                   4.0  \n",
       "49997                 True        100.0      3.86                   5.0  \n",
       "49998                False        100.0      4.58                   3.5  \n",
       "49999                False          0.0      3.49                   5.0  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2014-06-17'"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.last_trip_date[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.last_trip_date = pd.to_datetime(df.last_trip_date)\n",
    "df.signup_date = pd.to_datetime(df.signup_date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 50000 entries, 0 to 49999\n",
      "Data columns (total 12 columns):\n",
      " #   Column                  Non-Null Count  Dtype         \n",
      "---  ------                  --------------  -----         \n",
      " 0   city                    50000 non-null  object        \n",
      " 1   trips_in_first_30_days  50000 non-null  int64         \n",
      " 2   signup_date             50000 non-null  datetime64[ns]\n",
      " 3   avg_rating_of_driver    41878 non-null  float64       \n",
      " 4   avg_surge               50000 non-null  float64       \n",
      " 5   last_trip_date          50000 non-null  datetime64[ns]\n",
      " 6   phone                   49604 non-null  object        \n",
      " 7   surge_pct               50000 non-null  float64       \n",
      " 8   ultimate_black_user     50000 non-null  bool          \n",
      " 9   weekday_pct             50000 non-null  float64       \n",
      " 10  avg_dist                50000 non-null  float64       \n",
      " 11  avg_rating_by_driver    49799 non-null  float64       \n",
      "dtypes: bool(1), datetime64[ns](2), float64(6), int64(1), object(2)\n",
      "memory usage: 4.2+ MB\n"
     ]
    }
   ],
   "source": [
    "\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count                   50000\n",
       "unique                    182\n",
       "top       2014-06-29 00:00:00\n",
       "freq                     2036\n",
       "first     2014-01-01 00:00:00\n",
       "last      2014-07-01 00:00:00\n",
       "Name: last_trip_date, dtype: object"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['last_trip_date'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.37608"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "fraction_retained = (df.last_trip_date >= '2014-06-01').sum() / (df.last_trip_date >= '2014-06-01').count()\n",
    "fraction_retained"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>trips_in_first_30_days</th>\n",
       "      <th>avg_rating_of_driver</th>\n",
       "      <th>avg_surge</th>\n",
       "      <th>surge_pct</th>\n",
       "      <th>weekday_pct</th>\n",
       "      <th>avg_dist</th>\n",
       "      <th>avg_rating_by_driver</th>\n",
       "      <th>was_retained</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>50000.000000</td>\n",
       "      <td>41878.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>49799.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.278200</td>\n",
       "      <td>4.601559</td>\n",
       "      <td>1.074764</td>\n",
       "      <td>8.849536</td>\n",
       "      <td>60.926084</td>\n",
       "      <td>5.796827</td>\n",
       "      <td>4.778158</td>\n",
       "      <td>0.376080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.792684</td>\n",
       "      <td>0.617338</td>\n",
       "      <td>0.222336</td>\n",
       "      <td>19.958811</td>\n",
       "      <td>37.081503</td>\n",
       "      <td>5.707357</td>\n",
       "      <td>0.446652</td>\n",
       "      <td>0.484405</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.300000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>33.300000</td>\n",
       "      <td>2.420000</td>\n",
       "      <td>4.700000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.900000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>66.700000</td>\n",
       "      <td>3.880000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.050000</td>\n",
       "      <td>8.600000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>6.940000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>125.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>160.960000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       trips_in_first_30_days  avg_rating_of_driver     avg_surge  \\\n",
       "count            50000.000000          41878.000000  50000.000000   \n",
       "mean                 2.278200              4.601559      1.074764   \n",
       "std                  3.792684              0.617338      0.222336   \n",
       "min                  0.000000              1.000000      1.000000   \n",
       "25%                  0.000000              4.300000      1.000000   \n",
       "50%                  1.000000              4.900000      1.000000   \n",
       "75%                  3.000000              5.000000      1.050000   \n",
       "max                125.000000              5.000000      8.000000   \n",
       "\n",
       "          surge_pct   weekday_pct      avg_dist  avg_rating_by_driver  \\\n",
       "count  50000.000000  50000.000000  50000.000000          49799.000000   \n",
       "mean       8.849536     60.926084      5.796827              4.778158   \n",
       "std       19.958811     37.081503      5.707357              0.446652   \n",
       "min        0.000000      0.000000      0.000000              1.000000   \n",
       "25%        0.000000     33.300000      2.420000              4.700000   \n",
       "50%        0.000000     66.700000      3.880000              5.000000   \n",
       "75%        8.600000    100.000000      6.940000              5.000000   \n",
       "max      100.000000    100.000000    160.960000              5.000000   \n",
       "\n",
       "       was_retained  \n",
       "count  50000.000000  \n",
       "mean       0.376080  \n",
       "std        0.484405  \n",
       "min        0.000000  \n",
       "25%        0.000000  \n",
       "50%        0.000000  \n",
       "75%        1.000000  \n",
       "max        1.000000  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['was_retained'] = (df.last_trip_date >= '2014-06-01')*1\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 50000 entries, 0 to 49999\n",
      "Data columns (total 13 columns):\n",
      " #   Column                  Non-Null Count  Dtype         \n",
      "---  ------                  --------------  -----         \n",
      " 0   city                    50000 non-null  object        \n",
      " 1   trips_in_first_30_days  50000 non-null  int64         \n",
      " 2   signup_date             50000 non-null  datetime64[ns]\n",
      " 3   avg_rating_of_driver    41878 non-null  float64       \n",
      " 4   avg_surge               50000 non-null  float64       \n",
      " 5   last_trip_date          50000 non-null  datetime64[ns]\n",
      " 6   phone                   49604 non-null  object        \n",
      " 7   surge_pct               50000 non-null  float64       \n",
      " 8   ultimate_black_user     50000 non-null  bool          \n",
      " 9   weekday_pct             50000 non-null  float64       \n",
      " 10  avg_dist                50000 non-null  float64       \n",
      " 11  avg_rating_by_driver    49799 non-null  float64       \n",
      " 12  was_retained            50000 non-null  int32         \n",
      "dtypes: bool(1), datetime64[ns](2), float64(6), int32(1), int64(1), object(2)\n",
      "memory usage: 4.4+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "ax = plt.subplot(111)\n",
    "corr = df.corr()\n",
    "ax = sns.heatmap(corr)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "was_retained              1.000000\n",
       "trips_in_first_30_days    0.210463\n",
       "ultimate_black_user       0.205002\n",
       "surge_pct                 0.011797\n",
       "weekday_pct               0.009693\n",
       "avg_surge                -0.003333\n",
       "avg_rating_of_driver     -0.011653\n",
       "avg_rating_by_driver     -0.026791\n",
       "avg_dist                 -0.092780\n",
       "Name: was_retained, dtype: float64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "corr['was_retained'].sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Winterfell        23336\n",
       "Astapor           16534\n",
       "King's Landing    10130\n",
       "Name: city, dtype: int64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "df.city.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "iPhone     34582\n",
       "Android    15022\n",
       "Name: phone, dtype: int64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.phone.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Series([], Name: phone, dtype: int64)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df.phone[df.phone.isnull()]).value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "iPhone     34582\n",
       "Android    15022\n",
       "Other        396\n",
       "Name: phone, dtype: int64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.phone.fillna('Other', inplace=True)\n",
    "df.phone.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "cities_ohe = pd.get_dummies(df['city'])\n",
    "phones_ohe = pd.get_dummies(df['phone'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.join(cities_ohe).join(phones_ohe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "# move 'was_retained' to the end\n",
    "col_at_end = ['was_retained']\n",
    "df = df[[c for c in df if c not in col_at_end]\n",
    "       + [c for c in col_at_end if c in df]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Astapor</th>\n",
       "      <th>King's Landing</th>\n",
       "      <th>Winterfell</th>\n",
       "      <th>Android</th>\n",
       "      <th>Other</th>\n",
       "      <th>iPhone</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.330680</td>\n",
       "      <td>0.202600</td>\n",
       "      <td>0.466720</td>\n",
       "      <td>0.300440</td>\n",
       "      <td>0.007920</td>\n",
       "      <td>0.691640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.470463</td>\n",
       "      <td>0.401941</td>\n",
       "      <td>0.498896</td>\n",
       "      <td>0.458454</td>\n",
       "      <td>0.088642</td>\n",
       "      <td>0.461821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Astapor  King's Landing    Winterfell       Android         Other  \\\n",
       "count  50000.000000    50000.000000  50000.000000  50000.000000  50000.000000   \n",
       "mean       0.330680        0.202600      0.466720      0.300440      0.007920   \n",
       "std        0.470463        0.401941      0.498896      0.458454      0.088642   \n",
       "min        0.000000        0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.000000        0.000000      0.000000      0.000000      0.000000   \n",
       "50%        0.000000        0.000000      0.000000      0.000000      0.000000   \n",
       "75%        1.000000        0.000000      1.000000      1.000000      0.000000   \n",
       "max        1.000000        1.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "             iPhone  \n",
       "count  50000.000000  \n",
       "mean       0.691640  \n",
       "std        0.461821  \n",
       "min        0.000000  \n",
       "25%        0.000000  \n",
       "50%        1.000000  \n",
       "75%        1.000000  \n",
       "max        1.000000  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "df.describe().iloc[:, -7:-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "categoricals = df.iloc[:,-7:]\n",
    "fig = plt.figure()\n",
    "ax = plt.subplot(111)\n",
    "corr = categoricals.corr()\n",
    "ax = sns.heatmap(corr)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "was_retained      1.000000\n",
       "King's Landing    0.262284\n",
       "iPhone            0.225244\n",
       "Other            -0.007419\n",
       "Winterfell       -0.046611\n",
       "Astapor          -0.174655\n",
       "Android          -0.225464\n",
       "Name: was_retained, dtype: float64"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr['was_retained'].sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count                   50000\n",
       "unique                     31\n",
       "top       2014-01-18 00:00:00\n",
       "freq                     2948\n",
       "first     2014-01-01 00:00:00\n",
       "last      2014-01-31 00:00:00\n",
       "Name: signup_date, dtype: object"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.signup_date.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count                   50000\n",
       "unique                    182\n",
       "top       2014-06-29 00:00:00\n",
       "freq                     2036\n",
       "first     2014-01-01 00:00:00\n",
       "last      2014-07-01 00:00:00\n",
       "Name: last_trip_date, dtype: object"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.last_trip_date.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['signup_date'] = df['signup_date'].dt.strftime('%Y%m%d').astype(int) - 20140100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>trips_in_first_30_days</th>\n",
       "      <th>signup_date</th>\n",
       "      <th>avg_rating_of_driver</th>\n",
       "      <th>avg_surge</th>\n",
       "      <th>last_trip_date</th>\n",
       "      <th>phone</th>\n",
       "      <th>surge_pct</th>\n",
       "      <th>ultimate_black_user</th>\n",
       "      <th>weekday_pct</th>\n",
       "      <th>avg_dist</th>\n",
       "      <th>avg_rating_by_driver</th>\n",
       "      <th>Astapor</th>\n",
       "      <th>King's Landing</th>\n",
       "      <th>Winterfell</th>\n",
       "      <th>Android</th>\n",
       "      <th>Other</th>\n",
       "      <th>iPhone</th>\n",
       "      <th>was_retained</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>King's Landing</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "      <td>4.7</td>\n",
       "      <td>1.10</td>\n",
       "      <td>2014-06-17</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>15.4</td>\n",
       "      <td>True</td>\n",
       "      <td>46.2</td>\n",
       "      <td>3.67</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Astapor</td>\n",
       "      <td>0</td>\n",
       "      <td>29</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>2014-05-05</td>\n",
       "      <td>Android</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>50.0</td>\n",
       "      <td>8.26</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Astapor</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>4.3</td>\n",
       "      <td>1.00</td>\n",
       "      <td>2014-01-07</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>100.0</td>\n",
       "      <td>0.77</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>King's Landing</td>\n",
       "      <td>9</td>\n",
       "      <td>10</td>\n",
       "      <td>4.6</td>\n",
       "      <td>1.14</td>\n",
       "      <td>2014-06-29</td>\n",
       "      <td>iPhone</td>\n",
       "      <td>20.0</td>\n",
       "      <td>True</td>\n",
       "      <td>80.0</td>\n",
       "      <td>2.36</td>\n",
       "      <td>4.9</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Winterfell</td>\n",
       "      <td>14</td>\n",
       "      <td>27</td>\n",
       "      <td>4.4</td>\n",
       "      <td>1.19</td>\n",
       "      <td>2014-03-15</td>\n",
       "      <td>Android</td>\n",
       "      <td>11.8</td>\n",
       "      <td>False</td>\n",
       "      <td>82.4</td>\n",
       "      <td>3.13</td>\n",
       "      <td>4.9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             city  trips_in_first_30_days  signup_date  avg_rating_of_driver  \\\n",
       "0  King's Landing                       4           25                   4.7   \n",
       "1         Astapor                       0           29                   5.0   \n",
       "2         Astapor                       3            6                   4.3   \n",
       "3  King's Landing                       9           10                   4.6   \n",
       "4      Winterfell                      14           27                   4.4   \n",
       "\n",
       "   avg_surge last_trip_date    phone  surge_pct  ultimate_black_user  \\\n",
       "0       1.10     2014-06-17   iPhone       15.4                 True   \n",
       "1       1.00     2014-05-05  Android        0.0                False   \n",
       "2       1.00     2014-01-07   iPhone        0.0                False   \n",
       "3       1.14     2014-06-29   iPhone       20.0                 True   \n",
       "4       1.19     2014-03-15  Android       11.8                False   \n",
       "\n",
       "   weekday_pct  avg_dist  avg_rating_by_driver  Astapor  King's Landing  \\\n",
       "0         46.2      3.67                   5.0        0               1   \n",
       "1         50.0      8.26                   5.0        1               0   \n",
       "2        100.0      0.77                   5.0        1               0   \n",
       "3         80.0      2.36                   4.9        0               1   \n",
       "4         82.4      3.13                   4.9        0               0   \n",
       "\n",
       "   Winterfell  Android  Other  iPhone  was_retained  \n",
       "0           0        0      0       1             1  \n",
       "1           0        1      0       0             0  \n",
       "2           0        0      0       1             0  \n",
       "3           0        0      0       1             1  \n",
       "4           1        1      0       0             0  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.020210618434849614"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['signup_date'].corr(df['was_retained'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "ref = min(df['last_trip_date'])\n",
    "df['last_trip_date'] = (df['last_trip_date'] - ref).dt.days + 1 # We add 1 because takes the number of days since the first day, not since last year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7808374961937719"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['last_trip_date'].corr(df['was_retained'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 50000 entries, 0 to 49999\n",
      "Data columns (total 19 columns):\n",
      " #   Column                  Non-Null Count  Dtype  \n",
      "---  ------                  --------------  -----  \n",
      " 0   city                    50000 non-null  object \n",
      " 1   trips_in_first_30_days  50000 non-null  int64  \n",
      " 2   signup_date             50000 non-null  int32  \n",
      " 3   avg_rating_of_driver    41878 non-null  float64\n",
      " 4   avg_surge               50000 non-null  float64\n",
      " 5   last_trip_date          50000 non-null  int64  \n",
      " 6   phone                   50000 non-null  object \n",
      " 7   surge_pct               50000 non-null  float64\n",
      " 8   ultimate_black_user     50000 non-null  bool   \n",
      " 9   weekday_pct             50000 non-null  float64\n",
      " 10  avg_dist                50000 non-null  float64\n",
      " 11  avg_rating_by_driver    49799 non-null  float64\n",
      " 12  Astapor                 50000 non-null  uint8  \n",
      " 13  King's Landing          50000 non-null  uint8  \n",
      " 14  Winterfell              50000 non-null  uint8  \n",
      " 15  Android                 50000 non-null  uint8  \n",
      " 16  Other                   50000 non-null  uint8  \n",
      " 17  iPhone                  50000 non-null  uint8  \n",
      " 18  was_retained            50000 non-null  int32  \n",
      "dtypes: bool(1), float64(6), int32(2), int64(2), object(2), uint8(6)\n",
      "memory usage: 4.5+ MB\n"
     ]
    }
   ],
   "source": [
    "\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "df['ultimate_black_user'] = df['ultimate_black_user']*1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>trips_in_first_30_days</th>\n",
       "      <th>signup_date</th>\n",
       "      <th>avg_rating_of_driver</th>\n",
       "      <th>avg_surge</th>\n",
       "      <th>last_trip_date</th>\n",
       "      <th>surge_pct</th>\n",
       "      <th>ultimate_black_user</th>\n",
       "      <th>weekday_pct</th>\n",
       "      <th>avg_dist</th>\n",
       "      <th>avg_rating_by_driver</th>\n",
       "      <th>Astapor</th>\n",
       "      <th>King's Landing</th>\n",
       "      <th>Winterfell</th>\n",
       "      <th>Android</th>\n",
       "      <th>Other</th>\n",
       "      <th>iPhone</th>\n",
       "      <th>was_retained</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.00000</td>\n",
       "      <td>41878.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.00000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>49799.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.278200</td>\n",
       "      <td>16.54468</td>\n",
       "      <td>4.601559</td>\n",
       "      <td>1.074764</td>\n",
       "      <td>109.334780</td>\n",
       "      <td>8.849536</td>\n",
       "      <td>0.37708</td>\n",
       "      <td>60.926084</td>\n",
       "      <td>5.796827</td>\n",
       "      <td>4.778158</td>\n",
       "      <td>0.330680</td>\n",
       "      <td>0.202600</td>\n",
       "      <td>0.466720</td>\n",
       "      <td>0.300440</td>\n",
       "      <td>0.007920</td>\n",
       "      <td>0.691640</td>\n",
       "      <td>0.376080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.792684</td>\n",
       "      <td>8.75422</td>\n",
       "      <td>0.617338</td>\n",
       "      <td>0.222336</td>\n",
       "      <td>61.718985</td>\n",
       "      <td>19.958811</td>\n",
       "      <td>0.48466</td>\n",
       "      <td>37.081503</td>\n",
       "      <td>5.707357</td>\n",
       "      <td>0.446652</td>\n",
       "      <td>0.470463</td>\n",
       "      <td>0.401941</td>\n",
       "      <td>0.498896</td>\n",
       "      <td>0.458454</td>\n",
       "      <td>0.088642</td>\n",
       "      <td>0.461821</td>\n",
       "      <td>0.484405</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.00000</td>\n",
       "      <td>4.300000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>33.300000</td>\n",
       "      <td>2.420000</td>\n",
       "      <td>4.700000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>17.00000</td>\n",
       "      <td>4.900000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>128.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>66.700000</td>\n",
       "      <td>3.880000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>24.00000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.050000</td>\n",
       "      <td>169.000000</td>\n",
       "      <td>8.600000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>6.940000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>125.000000</td>\n",
       "      <td>31.00000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>182.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>160.960000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       trips_in_first_30_days  signup_date  avg_rating_of_driver  \\\n",
       "count            50000.000000  50000.00000          41878.000000   \n",
       "mean                 2.278200     16.54468              4.601559   \n",
       "std                  3.792684      8.75422              0.617338   \n",
       "min                  0.000000      1.00000              1.000000   \n",
       "25%                  0.000000      9.00000              4.300000   \n",
       "50%                  1.000000     17.00000              4.900000   \n",
       "75%                  3.000000     24.00000              5.000000   \n",
       "max                125.000000     31.00000              5.000000   \n",
       "\n",
       "          avg_surge  last_trip_date     surge_pct  ultimate_black_user  \\\n",
       "count  50000.000000    50000.000000  50000.000000          50000.00000   \n",
       "mean       1.074764      109.334780      8.849536              0.37708   \n",
       "std        0.222336       61.718985     19.958811              0.48466   \n",
       "min        1.000000        1.000000      0.000000              0.00000   \n",
       "25%        1.000000       45.000000      0.000000              0.00000   \n",
       "50%        1.000000      128.000000      0.000000              0.00000   \n",
       "75%        1.050000      169.000000      8.600000              1.00000   \n",
       "max        8.000000      182.000000    100.000000              1.00000   \n",
       "\n",
       "        weekday_pct      avg_dist  avg_rating_by_driver       Astapor  \\\n",
       "count  50000.000000  50000.000000          49799.000000  50000.000000   \n",
       "mean      60.926084      5.796827              4.778158      0.330680   \n",
       "std       37.081503      5.707357              0.446652      0.470463   \n",
       "min        0.000000      0.000000              1.000000      0.000000   \n",
       "25%       33.300000      2.420000              4.700000      0.000000   \n",
       "50%       66.700000      3.880000              5.000000      0.000000   \n",
       "75%      100.000000      6.940000              5.000000      1.000000   \n",
       "max      100.000000    160.960000              5.000000      1.000000   \n",
       "\n",
       "       King's Landing    Winterfell       Android         Other        iPhone  \\\n",
       "count    50000.000000  50000.000000  50000.000000  50000.000000  50000.000000   \n",
       "mean         0.202600      0.466720      0.300440      0.007920      0.691640   \n",
       "std          0.401941      0.498896      0.458454      0.088642      0.461821   \n",
       "min          0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%          0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "50%          0.000000      0.000000      0.000000      0.000000      1.000000   \n",
       "75%          0.000000      1.000000      1.000000      0.000000      1.000000   \n",
       "max          1.000000      1.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "       was_retained  \n",
       "count  50000.000000  \n",
       "mean       0.376080  \n",
       "std        0.484405  \n",
       "min        0.000000  \n",
       "25%        0.000000  \n",
       "50%        0.000000  \n",
       "75%        1.000000  \n",
       "max        1.000000  "
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV, cross_val_score\n",
    "from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve, accuracy_score, precision_score, recall_score, precision_recall_curve\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('ultimate_data_challenge.json') as f:\n",
    "    data = json.load(f)\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "df['was_retained'] = (df.last_trip_date >= '2014-06-01')*1\n",
    "df.last_trip_date = pd.to_datetime(df.last_trip_date)\n",
    "df.signup_date = pd.to_datetime(df.signup_date)\n",
    "df['signup_date'] = df['signup_date'].dt.strftime('%Y%m%d').astype(int) - 20140100\n",
    "df['last_trip_date'] = (df['last_trip_date'] - min(df['last_trip_date'])).dt.days + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 50000 entries, 0 to 49999\n",
      "Data columns (total 13 columns):\n",
      " #   Column                  Non-Null Count  Dtype  \n",
      "---  ------                  --------------  -----  \n",
      " 0   city                    50000 non-null  object \n",
      " 1   trips_in_first_30_days  50000 non-null  int64  \n",
      " 2   signup_date             50000 non-null  int32  \n",
      " 3   avg_rating_of_driver    41878 non-null  float64\n",
      " 4   avg_surge               50000 non-null  float64\n",
      " 5   last_trip_date          50000 non-null  int64  \n",
      " 6   phone                   49604 non-null  object \n",
      " 7   surge_pct               50000 non-null  float64\n",
      " 8   ultimate_black_user     50000 non-null  bool   \n",
      " 9   weekday_pct             50000 non-null  float64\n",
      " 10  avg_dist                50000 non-null  float64\n",
      " 11  avg_rating_by_driver    49799 non-null  float64\n",
      " 12  was_retained            50000 non-null  int32  \n",
      "dtypes: bool(1), float64(6), int32(2), int64(2), object(2)\n",
      "memory usage: 4.2+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### Step 1) Preprocess Data\n",
    "\n",
    "np.random.seed(0)\n",
    "\n",
    "df.phone.fillna('Other', inplace=True)\n",
    "categorical_features = ['city', 'phone']\n",
    "categorical_transformer = Pipeline(steps=[\n",
    "    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n",
    "    ('onehot', OneHotEncoder())\n",
    "]\n",
    ")\n",
    "\n",
    "numeric_features = [column for column in df.columns.tolist() if column not in categorical_features and\n",
    "                    column not in ['last_trip_date', 'was_retained']]\n",
    "\n",
    "numeric_transformer = Pipeline(steps=[\n",
    "    ('imputer', SimpleImputer(strategy='median')),\n",
    "    ('scaler', StandardScaler())\n",
    "]\n",
    ")\n",
    "\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('num', numeric_transformer, numeric_features),\n",
    "        ('cat', categorical_transformer, categorical_features)\n",
    "]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### Step 2) Split Data into Training and Test Sets\n",
    "X = df.drop(['was_retained', 'last_trip_date'], axis=1)\n",
    "y = df['was_retained']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0, stratify=y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "metrics = pd.DataFrame(index=['accuracy', 'precision', 'recall', 'AUC', 'Time to Train'], \n",
    "                       columns=['Dummy Model', 'Logistic Regression', 'K Nearest Neighbors', 'Support Vector Machine', 'Decision Tree', 'Random Forest', 'Naive Bayes'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dummy Model</th>\n",
       "      <th>Logistic Regression</th>\n",
       "      <th>K Nearest Neighbors</th>\n",
       "      <th>Support Vector Machine</th>\n",
       "      <th>Decision Tree</th>\n",
       "      <th>Random Forest</th>\n",
       "      <th>Naive Bayes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>accuracy</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>precision</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>recall</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AUC</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Time to Train</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Dummy Model Logistic Regression K Nearest Neighbors  \\\n",
       "accuracy              NaN                 NaN                 NaN   \n",
       "precision             NaN                 NaN                 NaN   \n",
       "recall                NaN                 NaN                 NaN   \n",
       "AUC                   NaN                 NaN                 NaN   \n",
       "Time to Train         NaN                 NaN                 NaN   \n",
       "\n",
       "              Support Vector Machine Decision Tree Random Forest Naive Bayes  \n",
       "accuracy                         NaN           NaN           NaN         NaN  \n",
       "precision                        NaN           NaN           NaN         NaN  \n",
       "recall                           NaN           NaN           NaN         NaN  \n",
       "AUC                              NaN           NaN           NaN         NaN  \n",
       "Time to Train                    NaN           NaN           NaN         NaN  "
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Steps 5 - 8:\n",
    "def train_and_score_model(model_name, estimator, param_grid=None, cv=5, iid=False):\n",
    "    \n",
    "    #### Step 5: Instantiate the CV Object\n",
    "    \n",
    "    if model_name in ['Dummy Model', 'Naive Bayes']:\n",
    "        cv = estimator\n",
    "    elif model_name == 'Logistic Regression':\n",
    "        cv = GridSearchCV(estimator, param_grid, cv=cv, iid=False)\n",
    "    else: \n",
    "        cv = RandomizedSearchCV(estimator, param_grid, cv=cv, iid=False, random_state=None)\n",
    "\n",
    "    #### Step 6: Fit on Training\n",
    "    t0 = time.time()\n",
    "    cv.fit(X_train, y_train)\n",
    "    ttt = time.time() - t0 # ttt stands for \"time to train\"\n",
    "    print(\"It takes %.3f seconds for %s fitting\" % (ttt, model_name))\n",
    "    metrics.loc['Time to Train', model_name] = ttt\n",
    "\n",
    "    #### Step 7: Predict on Test\n",
    "\n",
    "    y_pred = cv.predict(X_test)\n",
    "\n",
    "    #### Step 8: Scoring\n",
    "    ##### Accuracy\n",
    "\n",
    "    print(\"Accuracy with \" + model_name + \"on the testing set is: %.3f\" % cv.score(X_test, y_test))\n",
    "\n",
    "    metrics.loc['accuracy', model_name] = accuracy_score(y_pred=y_pred, y_true=y_test)\n",
    "    metrics.loc['precision', model_name] = precision_score(y_pred=y_pred, y_true=y_test)\n",
    "    metrics.loc['recall', model_name] = recall_score(y_pred=y_pred, y_true=y_test)\n",
    "    \n",
    "    if model_name != 'Support Vector Machine':\n",
    "        y_pred_prob = cv.predict_proba(X_test)[:,1]\n",
    "        metrics.loc['AUC', model_name] = roc_auc_score(y_test, y_pred_prob)\n",
    "\n",
    "    print(Conf_Matrix(confusion_matrix(y_test, y_pred)))\n",
    "    print(classification_report(y_test, y_pred))\n",
    "\n",
    "    if model_name != 'Support Vector Machine':\n",
    "        # ROC Curve\n",
    "        fpr, tpr, thresholds  = roc_curve(y_test, y_pred_prob)\n",
    "        plt.plot([0,1], [0,1], 'k--')\n",
    "        plt.plot(fpr, tpr, label=model_name)\n",
    "        plt.xlabel('False Positive Rate')\n",
    "        plt.ylabel('True Positive Rate')\n",
    "        plt.title('%s ROC Curve' % model_name)\n",
    "        plt.show()\n",
    "\n",
    "    return cv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Conf_Matrix(CM, labels=['Not Retained', 'Retained']):\n",
    "    df = pd.DataFrame(data=CM, index=labels, columns=labels)\n",
    "    df.index.name = 'TRUE'\n",
    "    df.columns.name = 'PREDICTION'\n",
    "    df.loc['Total'] = df.sum()\n",
    "    df['Total'] = df.sum(axis=1)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.dummy import DummyClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from scipy.stats import randint\n",
    "\n",
    "\n",
    "# Step 3: Instantiate the model/estimator\n",
    "classifier_dm = DummyClassifier(strategy=\"most_frequent\", random_state=0)\n",
    "classifier_lr = LogisticRegression(solver='liblinear', random_state=0)\n",
    "classifier_knn = KNeighborsClassifier()\n",
    "classifier_svm = SVC(random_state=0)\n",
    "classifier_dt = DecisionTreeClassifier(random_state=0)\n",
    "classifier_rf = RandomForestClassifier(random_state=0)\n",
    "classifier_nb = GaussianNB()\n",
    "\n",
    "classifiers = [classifier_dm, classifier_lr, classifier_knn, classifier_svm, classifier_dt, classifier_rf, classifier_nb]\n",
    "\n",
    "# Step 4: Specify the Hyperparameter Space\n",
    "param_grid_dm = None\n",
    "param_grid_lr = {\n",
    "    'preprocessor__num__imputer__strategy': ['mean', 'median'],\n",
    "    'classifier__C': np.logspace(-5, 8, 15),\n",
    "    'classifier__penalty': ['l1', 'l2']\n",
    "}\n",
    "param_grid_knn = {\n",
    "    'preprocessor__num__imputer__strategy': ['mean', 'median'],\n",
    "    'classifier__n_neighbors': np.arange(1,20)\n",
    "}\n",
    "param_grid_svm = {\n",
    "    'preprocessor__num__imputer__strategy': ['mean', 'median'],\n",
    "    'classifier__C': [0.1, 1, 10, 100],\n",
    "    'classifier__gamma': [1, 0.1, 0.01]\n",
    "}\n",
    "param_grid_dt = {\n",
    "                'preprocessor__num__imputer__strategy': ['mean', 'median'],\n",
    "                 'classifier__max_depth': [3, 10, 20, None],\n",
    "                'classifier__max_features': randint(1, 9),\n",
    "                'classifier__min_samples_leaf': randint(1, 9),\n",
    "                'classifier__min_samples_split': randint(2, 9),\n",
    "                'classifier__criterion': [\"gini\", \"entropy\"]\n",
    "}\n",
    "param_grid_rf = {\n",
    "                 'preprocessor__num__imputer__strategy': ['mean', 'median'], \n",
    "                 'classifier__n_estimators': [50, 100],\n",
    "                 'classifier__criterion': [\"gini\", \"entropy\"],\n",
    "                 'classifier__max_depth': [3, 10, 20, None],\n",
    "                 'classifier__min_samples_leaf': randint(1, 9),\n",
    "                 'classifier__min_samples_split': randint(2, 9),\n",
    "                 'classifier__max_features': randint(1, 9)\n",
    "}\n",
    "param_grid_nb = None\n",
    "\n",
    "param_grids = [param_grid_dm, param_grid_lr, param_grid_knn, param_grid_svm, param_grid_dt, param_grid_rf, param_grid_nb]\n",
    "\n",
    "model_names = ['Dummy Model', 'Logistic Regression', 'K Nearest Neighbors', 'Support Vector Machine', 'Decision Tree', 'Random Forest', 'Naive Bayes']\n",
    "cv_names = ['dm_cv', 'lr_cv', 'knn_cv', 'svm_cv', 'dt_cv', 'rf_cv', 'nb_cv']\n",
    "cvs = [None, 5, 5, 5, 5, 5, 5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "It takes 0.528 seconds for Dummy Model fitting\n",
      "Accuracy with Dummy Modelon the testing set is: 0.624\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ps783\\anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PREDICTION    Not Retained  Retained  Total\n",
      "TRUE                                       \n",
      "Not Retained          9359         0   9359\n",
      "Retained              5641         0   5641\n",
      "Total                15000         0  15000\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.62      1.00      0.77      9359\n",
      "           1       0.00      0.00      0.00      5641\n",
      "\n",
      "    accuracy                           0.62     15000\n",
      "   macro avg       0.31      0.50      0.38     15000\n",
      "weighted avg       0.39      0.62      0.48     15000\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ps783\\anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ps783\\anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_search.py:823: FutureWarning: The parameter 'iid' is deprecated in 0.22 and will be removed in 0.24.\n",
      "  \"removed in 0.24.\", FutureWarning\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "It takes 190.581 seconds for Logistic Regression fitting\n",
      "Accuracy with Logistic Regressionon the testing set is: 0.716\n",
      "PREDICTION    Not Retained  Retained  Total\n",
      "TRUE                                       \n",
      "Not Retained          7984      1375   9359\n",
      "Retained              2880      2761   5641\n",
      "Total                10864      4136  15000\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.73      0.85      0.79      9359\n",
      "           1       0.67      0.49      0.56      5641\n",
      "\n",
      "    accuracy                           0.72     15000\n",
      "   macro avg       0.70      0.67      0.68     15000\n",
      "weighted avg       0.71      0.72      0.71     15000\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ps783\\anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_search.py:823: FutureWarning: The parameter 'iid' is deprecated in 0.22 and will be removed in 0.24.\n",
      "  \"removed in 0.24.\", FutureWarning\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "It takes 421.367 seconds for K Nearest Neighbors fitting\n",
      "Accuracy with K Nearest Neighborson the testing set is: 0.750\n",
      "PREDICTION    Not Retained  Retained  Total\n",
      "TRUE                                       \n",
      "Not Retained          7739      1620   9359\n",
      "Retained              2125      3516   5641\n",
      "Total                 9864      5136  15000\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.78      0.83      0.81      9359\n",
      "           1       0.68      0.62      0.65      5641\n",
      "\n",
      "    accuracy                           0.75     15000\n",
      "   macro avg       0.73      0.73      0.73     15000\n",
      "weighted avg       0.75      0.75      0.75     15000\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                 ('classifier', classifier_dm)])\n",
    "dm_cv = train_and_score_model('Dummy Model', pipeline, param_grid_dm)\n",
    "\n",
    "\n",
    "pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                     ('classifier', classifier_lr)])\n",
    "lr_cv = train_and_score_model('Logistic Regression', pipeline, param_grid_lr)\n",
    "\n",
    "\n",
    "pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                     ('classifier', classifier_knn)])\n",
    "knn_cv = train_and_score_model('K Nearest Neighbors', pipeline, param_grid_knn)\n",
    "\n",
    "\n",
    "pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                     ('classifier', classifier_svm)])\n",
    "svm_cv = train_and_score_model('Support Vector Machine', pipeline, param_grid_svm)\n",
    "\n",
    "\n",
    "pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                     ('classifier', classifier_dt)])\n",
    "dt_cv = train_and_score_model('Decision Tree', pipeline, param_grid_dt)\n",
    "\n",
    "\n",
    "pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                     ('classifier', classifier_rf)])\n",
    "rf_cv = train_and_score_model('Random Forest', pipeline, param_grid_rf)\n",
    "\n",
    "\n",
    "pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                     ('classifier', classifier_nb)])\n",
    "nb_cv = train_and_score_model('Naive Bayes', pipeline, param_grid_nb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pandas.plotting import table\n",
    "metrics.astype(float).round(3)\n",
    "actual_metrics = metrics.astype(float).round(3).loc[['accuracy', 'precision', 'recall', 'AUC']]*100\n",
    "actual_metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "fig, ax = plt.subplots(figsize=(16,10))\n",
    "actual_metrics.plot(kind='barh', ax=ax)\n",
    "ax.set_xlabel('Percentage')\n",
    "ax.set_title('Comparing the 6 Models')\n",
    "ax.grid();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "precision_lr, recall_lr, thresholds_lr = precision_recall_curve(y_true=y_test, probas_pred=lr_cv.predict_proba(X_test)[:,1])\n",
    "precision_knn, recall_knn, thresholds_knn = precision_recall_curve(y_true=y_test, probas_pred=knn_cv.predict_proba(X_test)[:,1])\n",
    "#precision_svm, recall_svm, thresholds_svm = precision_recall_curve(y_true=y_test, probas_pred=svm.predict_proba(X_test)[:,1])\n",
    "precision_dt, recall_dt, thresholds_dt = precision_recall_curve(y_true=y_test, probas_pred=dt_cv.predict_proba(X_test)[:,1])\n",
    "precision_rf, recall_rf, thresholds_rf = precision_recall_curve(y_true=y_test, probas_pred=rf_cv.predict_proba(X_test)[:,1])\n",
    "precision_nb, recall_nb, thresholds_nb = precision_recall_curve(y_true=y_test, probas_pred=nb_cv.predict_proba(X_test)[:,1])\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(16,10))\n",
    "ax.plot(precision_lr, recall_lr, label='Logistic Regression')\n",
    "ax.plot(precision_knn, recall_knn, label='KNN')\n",
    "ax.plot(precision_dt, recall_dt, label='Decision Tree')\n",
    "ax.plot(precision_rf, recall_rf, label='Random Forest')\n",
    "ax.plot(precision_nb, recall_nb, label='Naive Bayes')\n",
    "ax.set_xlabel('Precision')\n",
    "ax.set_ylabel('Recall')\n",
    "ax.set_title('Precision-Recall Curve')\n",
    "ax.hlines(y=0.5, xmin=0, xmax=1, color='red')\n",
    "ax.legend()\n",
    "ax.grid();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#metrics.to_csv('metrics')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "We see that Random Forest produces the best model, with an accuracy of about 78%. This is about 15.5% better than the Dummy Model which just predicts that the user was not retained for every user. So it's a sizable improvement. In addition to having the highest accuracy of any model, we also see that is has the best AUC score of any model, or the best tradeoff between True positive rate and False positive rate. Note that here, 'positive rate' is defined as the rate at which we correctly identify 'retained'. That is, we consider the positive class to be the retained customers, and the negative class to be the customers who were not retained. Also note that we have no AUC score for our SVM model because the SVC class in scikit-learn does not have a predict_proba method.\n",
    "\n",
    "We don't really need to look at the precision and recall scores because they are captured in the AUC scores for every model. And since Random Forest has the best AUC score and best accuracy, it is our best model.\n",
    "\n",
    "Note that we are able to achieve better or worse results for accuracy, precision, and recall by varying the probability at which we classify retention. By default, the probability threshold is set at 50%, as this is the intuitive level for classification. But if we cared more about recall, for example, we would lower the threshold for classification to make sure that we classified as retained more of the customers who were actually retained. This would come at the price of precision. Correspondingly, if we cared more about precision, we would raise the probability threshold.\n",
    "\n",
    "In our scenario, in order to determine which one we care more about maximizing, we have to ask ourselves the folowing question: What do we want to avoid more: predicting that a retained customer will not be retained (false negatives)? Or predicting that a non-retained customer will be retained (false positives)? A good case can be made for each. Since we don't have enough information to make that decision, we will not adjust the threshold.\n",
    "\n",
    "This is a good place to recap what question we were trying to answer and what we have done to answer it.\n",
    "\n",
    "Build    a    predictive     model     to     help    Ultimate    determine    whether    or    not    a    user    will    be    active  in     their    6th    month     on     the     system.    Discuss    why     you     chose     your    approach,    what  alternatives     you     considered,     and    any     concerns     you    have.    How     valid     is     your    model?  Include    any     key     indicators    of     model    performance. \n",
    "\n",
    "We have built several classification models to predict whether customers will be retained or not using the most common classification algorithms. We chose a Random Forest model to be our model for prediction because it produced superior accuracy and AUC scores to all of the other classification models we used.\n",
    "\n",
    "In terms of any concerns we have, the biggest concern would be that we might value false negative more highly than false positives or vice-versa. In that case, we would want to adjust the probability threshold for classification to reflect that. In any case, Random Forest remains the best model due to it having the best precision-recall curve of any model.\n",
    "\n",
    "In terms of model validity, our model is only as accurate as the input data. Also, our model is only as good as we the degree to which we know how to use it. That goes back to the point about precion-recall. First we have to know which we care about more before we can use our model optimally.\n",
    "\n",
    "Finally, to reiterate the indicators of model performance, we achieved an accuracy of about 78%, and an AUC score of about 84.7%.\n",
    "\n",
    "To answer, these questions, we need model interpretability. Fortunately, the Random Forest model provides better interpretability than other models, particularly neural networks.\n",
    "\n",
    "We have a problem, though, with getting the feature importances for our model, because scikit-learn does not allow us to extract the features from a pipeline object, so we have no way of observing which feature importances correspond to which features. As a result, we need to run our model again, using the optimal parameters that we have already found."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rf_cv.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "rf_model = rf_cv.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rf_model.named_steps['classifier'].feature_importances_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('ultimate_data_challenge.json') as f:\n",
    "    data = json.load(f)\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "df['was_retained'] = (df.last_trip_date >= '2014-06-01')*1\n",
    "df.last_trip_date = pd.to_datetime(df.last_trip_date)\n",
    "df.signup_date = pd.to_datetime(df.signup_date)\n",
    "df['signup_date'] = df['signup_date'].dt.strftime('%Y%m%d').astype(int) - 20140100\n",
    "df['last_trip_date'] = (df['last_trip_date'] - min(df['last_trip_date'])).dt.days + 1 \n",
    "\n",
    "df.phone.fillna('Other', inplace=True)\n",
    "df['city'] = df['city'].astype('category')\n",
    "df['phone'] = df['phone'].astype('category')\n",
    "df = pd.get_dummies(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imputation\n",
    "df.avg_rating_by_driver.fillna(df.avg_rating_by_driver.mean(),inplace=True)\n",
    "df.avg_rating_of_driver.fillna(df.avg_rating_of_driver.mean(),inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#### Step 2) Split Data into Training and Test Sets\n",
    "X = df.drop(['was_retained', 'last_trip_date'], axis=1)\n",
    "y = df['was_retained']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0, stratify=y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 3: Instantiate the model/estimator\n",
    "classifier_rf = RandomForestClassifier(random_state=0, criterion='gini', max_depth=20, \n",
    "                                       max_features=4, min_samples_leaf=7, min_samples_split=5, n_estimators=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    " t0 = time.time()\n",
    "    classifier_rf.fit(X_train, y_train)\n",
    "    ttt = time.time() - t0 # ttt stands for \"time to train\"\n",
    "    print(\"It takes %.3f seconds for %s fitting\" % (ttt, 'Random Forest'))\n",
    "\n",
    "    #### Step 7: Predict on Test\n",
    "\n",
    "    y_pred = classifier_rf.predict(X_test)\n",
    "\n",
    "    #### Step 8: Scoring\n",
    "    ##### Accuracy\n",
    "\n",
    "    print(\"Accuracy with \" + 'Random Forest' + \"on the testing set is: %.3f\" % classifier_rf.score(X_test, y_test))\n",
    "    \n",
    "    y_pred_prob = classifier_rf.predict_proba(X_test)[:,1]\n",
    "    print(\"ROC AUC score is: %.3f\" %roc_auc_score(y_test, y_pred_prob))\n",
    "\n",
    "    print(Conf_Matrix(confusion_matrix(y_test, y_pred)))\n",
    "    print(classification_report(y_test, y_pred))\n",
    "\n",
    "    # ROC Curve\n",
    "    fpr, tpr, thresholds  = roc_curve(y_test, y_pred_prob)\n",
    "    plt.plot([0,1], [0,1], 'k--')\n",
    "    plt.plot(fpr, tpr, label='Random Forest')\n",
    "    plt.xlabel('False Positive Rate')\n",
    "    plt.ylabel('True Positive Rate')\n",
    "    plt.title('%s ROC Curve' % 'Random Forest')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.DataFrame(classifier_rf.feature_importances_, \n",
    "             index = X_train.columns, columns = ['importance']).sort_values('importance', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "display(df['avg_rating_by_driver'].corr(df['was_retained']))\n",
    "display(df['surge_pct'].corr(df['was_retained']))\n",
    "display(df['weekday_pct'].corr(df['was_retained']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "g = sns.FacetGrid(df, row='was_retained')\n",
    "g = g.map(plt.hist, \"avg_rating_by_driver\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The second most important feature was the percent of trips taken with surge multiplier > 1. We know that this is very slightly positively correlated with retention."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "g = sns.FacetGrid(df, row='was_retained')\n",
    "g = g.map(plt.hist, \"surge_pct\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Since there is no clear connection here, the best we can say is that Ultimate should do more research into the effects of surges on user retention. Perhaps it is charging surge prices too much and that is scaring users away."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "g = sns.FacetGrid(df, row='was_retained')\n",
    "g = g.map(plt.hist, \"weekday_pct\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For our last important feature, the percents of the user's trips occuring on a weekday, we see that the non-retained user distribution shows far more users who either only use it on the weekend, or only use it during the week. The actionable insight here would for Ultimate to target those users who experience no difference in their need for transportation between the week and the weekend. Those users are retained most."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
